** Chapter 01
Right, Yarn uses yarn.lock to, dunno, coordinate with git to ensure version consistency.
NPM has shrinkwrap.

yarn add --dev [package]
yarn remove package

With:
babel-node src,
yarn add --dev babel-preset-env,
and .babelrc,

we can use babel to translate ES6 on the fly whenever we run yarn start.

eslint-config-airbnb, eslint-plugin-import, eslint-plugin-jsx-a11y, and eslint-plugin-react
yarn add --dev eslint
Then we add a test task to yarn.

I can see that we are using package.json to be something like our Clojure config file, using boot.

If going semi-colon-less, using Automatic Semicolon Insertion: no-unexpected-multiline

yarn add --dev eslint-plugin-compat

TYPE ANNOTATIONS ZOMG
yarn add --dev flow-bin babel-preset-flow babel-eslint eslint-plugin-flowtype
- flow-bin is the binary to run Flow in our scripts tasks, 
- babel-preset-flow is the preset for Babel to understand Flow annotations, 
- babel-eslint is a package to enable ESLint to rely on Babel's parser instead of its own, and 
- eslint-plugin-flowtype is an ESLint plugin to lint Flow annotations. Phew.

ESLint will use Babel's parser to understand Flow's annotations. wwwwhhhhooooaaa.


Chain into test, then create .flowconfig

// flow-disable-next-line
something.flow(doesnt.like).for.instance()

Think I'd actually forgot to run that giant yarn add flow. Then had to tweak it so it wouldn't look at node modules.

TESTING
yarn add --dev jest babel-jest

Then we can add husky to run before every Git commit or push!
yarn add --dev husky

** Chapter 03
src/shared/ folder is where we put isomorphic / universal code, for both server and client.

yarn add express compression
Express middleware to add Gzip compression??

"dev:start": "nodemon --ignore lib --exec babel-node src/server"
nodemon must use babel-node, which we use to allow us to use ES6 syntax.


yarn add --dev pm2

pm2 looks badass. Turns our app into a process we can controll more easily.

A neat simple package to delete files with cross platform support is rimraf.

Run yarn add --dev rimraf

"prod:build": "rimraf lib && babel src -d lib --ignore .test.js",

rimraf will delete all the files, and then babel will build them, ignoring test
files, and put them into lib.

 "prod:start": "cross-env NODE_ENV=production pm2 start lib/server && pm2 logs",
 "prod:stop": "pm2 delete server",

yarn add --dev cross-env
Literally just to make the above work on windows.

the prod:start command is passing node-env = production to pm2.

"prepush": "yarn test && yarn prod:build"

We are not committing these files, since /lib is in our gitignore, but we are
building before pushing every time, to ensure everything works.

I love these checks, love that we're daemonizing our server, love that we're
using express, and of course the automated testing and freaking type annotations
are amazing.
** Chapter 04: Webpack, React, and Hot Module Replacement
*** Webpack
Webpack bundles your modules into one bundle for the client to execute.

We add constants to our config file.

We put babel-polyfill in our client/index.js, before anything else, so we can
use ES6 Promises etc.

Put browser: true in eslint's config to prevent complaints about window/document being undefined.

More nice ES6 syntax! We are out of the dark ages in modularizing JS files!
We can require single functions.

import { isProd } from './src/shared/util'

webpack.config.babel.js will tell webpack how to bundle our app into ES5.

The dist folder  will contain things that are generated automatically, unlike CSS.

In module.rules, we say all JS and JSx files, but not node-modules, to go through babel-loader.

And we will use those extensions to resolve modules when we import them. 
And we declare a port for Webpack Dev Server.

We extend the filename with babel.js so the config file is itself transformed!

Don't yet know what babel-loader is.

"yarn add --dev webpack webpack-dev-server babel-core babel-loader"
babel-core being peer dependency of babel-loader.

So, before, we used babel to compile our files in preparation for distribution.
Now we will use Webpack to do Hot Module Reloading, and to prepare for distribution.

Then we add more tasks and tweak others.

And add an app container in render-app.js. If in production, our React app will
be rendered from the static path; if in dev, from our bundle.js file. It also
uses ES6 templating, with constant names following convention. Nice.

The path to the WDS bundle is virtual? and WDS needs a different port?


So cool! In server/index.js, we console log a message to keep yarn dev:wd
running in another terminal. And yes that file also triggers a nodemon restart.

Whenever I change client/index.js, webpack recompiles, triggering a nodemon
restart. The chrome tab errors out, then restarts and reflects the changes.

Hot reloading on front and back end!

You should see static/css/style.css under localhost:8000/, and have all your ES6
source files under webpack://./src.

THE LATTER MEANS SOURCE MAPS ARE WORKING.


After stopping all processes:
- yarn prod:build, and then yarn prod:start. 
- Browse to http://localhost:8000/, same text. 
- In the Source tab of the Chrome console, find static/js/bundle.js under localhost:8000/
- , but no webpack:// sources. 
- bundle.js minified!

That is so cool! I can barely keep track of all these packages, and how much
functionality we have gained so quickly!

So, yarn start will run our express server with nodemon.  yarn dev:wds will run
our Webpack Dev Server. We'll always have these running in development.

And then of course we'll need another window to continue actually developing.

When we're ready to deploy, we'll use rimraf and babel and webpack to transpile
and bundle our code. Then we can use pm2 to run our server in production.

I'm not entirely clear why we use WDS in dev and pm2 in production.
*** React
flow-react-proptypes which automatically generates PropTypes from Flow
annotations for your React components.

omg.

Not completely clear on how the React page, when called with React render DOM,
actually gets tied in with the server.

When changed, the nodemon restart and webpack rebuild are triggered.

We want to make this faster, so it reloads without full-page reload.

Hot Module Replacement!

Cross-Origin Resource Sharing which is necessary for HMR.

We need to make our App a child of react-hot-loader's AppContainer, and we need
to require the next version of our App when hot-reloading.

Much faster!

** Redux, Immutable, and Fetch
Yes, JS is now strongly typed and immutable. Boom.
*** Immutable and Redux
We have redux, and redux-actions. Redux is our single source of truth,
redux-actions helps avoid boilerplate in writing and reading from Redux.

We have an action and an action creator, a function. Action creators return
objects with type and payload.

Then we create a reducer, which has a state and an action. Given an action with
a particular type, the reducer will handle it accordingly.

Here our reducer will use its state's set method to reset the state. The set
method belongs to Immutable JS.

import type { fromJS as Immut } from 'immutable'
We are using flow's import type statement to rename fromJS, for clarity.

Now we have redux, redux-actions, types from Flow, and immutable JS.

react-redux connects a Redux store with React components.

*** Components
- Components are dumb React components, in a sense that they don't know anything
  about the Redux state. 
- Containers are smart components that know about the state and that we are
  going to connect to our dumb components.

// @flow

import React from 'react'

type Props = { label: string, handleClick: Function, }

const Button = ({ label, handleClick }: Props) => <button
  onClick={handleClick}>{label}</button>

export default Button

This is a dumb component, where we are just passing in the Props as React always
requires us to do.

I must say the syntax still jars a bit, after ClojureScript.

However, note thare we are annotating as we go, which is nice.

We must now wrap these dumb components in smart containers which know about
Redux actions, and the state of our app.

export default connect(mapStateToProps, mapDispatchToProps)(Button)

This container hooks up the Button component with the sayHello action and
Redux's dispatch method.

export default connect(mapStateToProps)(Message)
- This container hooks up the Redux's app state with the Message component. When
  the state changes, Message will now automatically re-render with the proper
  message prop. These connections are done via the connect function of
  react-redux.

*** Store
Stores are created by passing reducers to them. Here we only have one reducer,
but for the sake of future scalability, we use combineReducers to group all of
our reducers together.

The app-container was our hot-loader.
And now we wrap it in our provider.

Apparently the redux devtools should be a component living in your app, or we
can use the Chrome extension. It is amazing!!

** To review
express.static, and other methods.
Redux! and actions.
React syntax.
